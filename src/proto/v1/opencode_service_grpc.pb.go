// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/opencode_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenCodeService_Health_FullMethodName          = "/opencode.v1.OpenCodeService/Health"
	OpenCodeService_GetSession_FullMethodName      = "/opencode.v1.OpenCodeService/GetSession"
	OpenCodeService_ResetSession_FullMethodName    = "/opencode.v1.OpenCodeService/ResetSession"
	OpenCodeService_GetSessionStats_FullMethodName = "/opencode.v1.OpenCodeService/GetSessionStats"
	OpenCodeService_SendMessage_FullMethodName     = "/opencode.v1.OpenCodeService/SendMessage"
	OpenCodeService_ListMessages_FullMethodName    = "/opencode.v1.OpenCodeService/ListMessages"
	OpenCodeService_StreamMessages_FullMethodName  = "/opencode.v1.OpenCodeService/StreamMessages"
	OpenCodeService_ClearMessages_FullMethodName   = "/opencode.v1.OpenCodeService/ClearMessages"
	OpenCodeService_ListFiles_FullMethodName       = "/opencode.v1.OpenCodeService/ListFiles"
	OpenCodeService_ReadFile_FullMethodName        = "/opencode.v1.OpenCodeService/ReadFile"
	OpenCodeService_WriteFile_FullMethodName       = "/opencode.v1.OpenCodeService/WriteFile"
	OpenCodeService_DeleteFile_FullMethodName      = "/opencode.v1.OpenCodeService/DeleteFile"
	OpenCodeService_GetFileChanges_FullMethodName  = "/opencode.v1.OpenCodeService/GetFileChanges"
	OpenCodeService_CancelAgent_FullMethodName     = "/opencode.v1.OpenCodeService/CancelAgent"
	OpenCodeService_GetAgentStatus_FullMethodName  = "/opencode.v1.OpenCodeService/GetAgentStatus"
	OpenCodeService_ListModels_FullMethodName      = "/opencode.v1.OpenCodeService/ListModels"
	OpenCodeService_SetModel_FullMethodName        = "/opencode.v1.OpenCodeService/SetModel"
)

// OpenCodeServiceClient is the client API for OpenCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OpenCodeService is the main API service for a single-session container
type OpenCodeServiceClient interface {
	// Health check for container status
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Get current session info (auto-created if none exists)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	// Reset/clear the current session
	ResetSession(ctx context.Context, in *ResetSessionRequest, opts ...grpc.CallOption) (*ResetSessionResponse, error)
	// Get session statistics
	GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error)
	// Send a message and get streaming response
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMessageResponse], error)
	// List message history
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Stream real-time message updates
	StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMessagesResponse], error)
	// Clear all messages
	ClearMessages(ctx context.Context, in *ClearMessagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List workspace files
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Read file content
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	// Write file content
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error)
	// Delete file
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get file changes/diff
	GetFileChanges(ctx context.Context, in *GetFileChangesRequest, opts ...grpc.CallOption) (*GetFileChangesResponse, error)
	// Cancel current agent operation
	CancelAgent(ctx context.Context, in *CancelAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get agent status
	GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error)
	// List available models
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Set agent model
	SetModel(ctx context.Context, in *SetModelRequest, opts ...grpc.CallOption) (*SetModelResponse, error)
}

type openCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenCodeServiceClient(cc grpc.ClientConnInterface) OpenCodeServiceClient {
	return &openCodeServiceClient{cc}
}

func (c *openCodeServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) ResetSession(ctx context.Context, in *ResetSessionRequest, opts ...grpc.CallOption) (*ResetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetSessionResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_ResetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionStatsResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_GetSessionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OpenCodeService_ServiceDesc.Streams[0], OpenCodeService_SendMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMessageRequest, SendMessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenCodeService_SendMessageClient = grpc.ServerStreamingClient[SendMessageResponse]

func (c *openCodeServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OpenCodeService_ServiceDesc.Streams[1], OpenCodeService_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessagesRequest, StreamMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenCodeService_StreamMessagesClient = grpc.ServerStreamingClient[StreamMessagesResponse]

func (c *openCodeServiceClient) ClearMessages(ctx context.Context, in *ClearMessagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OpenCodeService_ClearMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_ReadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteFileResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_WriteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OpenCodeService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) GetFileChanges(ctx context.Context, in *GetFileChangesRequest, opts ...grpc.CallOption) (*GetFileChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileChangesResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_GetFileChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) CancelAgent(ctx context.Context, in *CancelAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OpenCodeService_CancelAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentStatusResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_GetAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCodeServiceClient) SetModel(ctx context.Context, in *SetModelRequest, opts ...grpc.CallOption) (*SetModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetModelResponse)
	err := c.cc.Invoke(ctx, OpenCodeService_SetModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenCodeServiceServer is the server API for OpenCodeService service.
// All implementations must embed UnimplementedOpenCodeServiceServer
// for forward compatibility.
//
// OpenCodeService is the main API service for a single-session container
type OpenCodeServiceServer interface {
	// Health check for container status
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Get current session info (auto-created if none exists)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	// Reset/clear the current session
	ResetSession(context.Context, *ResetSessionRequest) (*ResetSessionResponse, error)
	// Get session statistics
	GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error)
	// Send a message and get streaming response
	SendMessage(*SendMessageRequest, grpc.ServerStreamingServer[SendMessageResponse]) error
	// List message history
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Stream real-time message updates
	StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[StreamMessagesResponse]) error
	// Clear all messages
	ClearMessages(context.Context, *ClearMessagesRequest) (*emptypb.Empty, error)
	// List workspace files
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Read file content
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	// Write file content
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error)
	// Delete file
	DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error)
	// Get file changes/diff
	GetFileChanges(context.Context, *GetFileChangesRequest) (*GetFileChangesResponse, error)
	// Cancel current agent operation
	CancelAgent(context.Context, *CancelAgentRequest) (*emptypb.Empty, error)
	// Get agent status
	GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error)
	// List available models
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Set agent model
	SetModel(context.Context, *SetModelRequest) (*SetModelResponse, error)
	mustEmbedUnimplementedOpenCodeServiceServer()
}

// UnimplementedOpenCodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenCodeServiceServer struct{}

func (UnimplementedOpenCodeServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedOpenCodeServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedOpenCodeServiceServer) ResetSession(context.Context, *ResetSessionRequest) (*ResetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSession not implemented")
}
func (UnimplementedOpenCodeServiceServer) GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionStats not implemented")
}
func (UnimplementedOpenCodeServiceServer) SendMessage(*SendMessageRequest, grpc.ServerStreamingServer[SendMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedOpenCodeServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedOpenCodeServiceServer) StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[StreamMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedOpenCodeServiceServer) ClearMessages(context.Context, *ClearMessagesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearMessages not implemented")
}
func (UnimplementedOpenCodeServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedOpenCodeServiceServer) ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedOpenCodeServiceServer) WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedOpenCodeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedOpenCodeServiceServer) GetFileChanges(context.Context, *GetFileChangesRequest) (*GetFileChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileChanges not implemented")
}
func (UnimplementedOpenCodeServiceServer) CancelAgent(context.Context, *CancelAgentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAgent not implemented")
}
func (UnimplementedOpenCodeServiceServer) GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStatus not implemented")
}
func (UnimplementedOpenCodeServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedOpenCodeServiceServer) SetModel(context.Context, *SetModelRequest) (*SetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetModel not implemented")
}
func (UnimplementedOpenCodeServiceServer) mustEmbedUnimplementedOpenCodeServiceServer() {}
func (UnimplementedOpenCodeServiceServer) testEmbeddedByValue()                         {}

// UnsafeOpenCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenCodeServiceServer will
// result in compilation errors.
type UnsafeOpenCodeServiceServer interface {
	mustEmbedUnimplementedOpenCodeServiceServer()
}

func RegisterOpenCodeServiceServer(s grpc.ServiceRegistrar, srv OpenCodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedOpenCodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenCodeService_ServiceDesc, srv)
}

func _OpenCodeService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_ResetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).ResetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_ResetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).ResetSession(ctx, req.(*ResetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_GetSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).GetSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_GetSessionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).GetSessionStats(ctx, req.(*GetSessionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenCodeServiceServer).SendMessage(m, &grpc.GenericServerStream[SendMessageRequest, SendMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenCodeService_SendMessageServer = grpc.ServerStreamingServer[SendMessageResponse]

func _OpenCodeService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenCodeServiceServer).StreamMessages(m, &grpc.GenericServerStream[StreamMessagesRequest, StreamMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenCodeService_StreamMessagesServer = grpc.ServerStreamingServer[StreamMessagesResponse]

func _OpenCodeService_ClearMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).ClearMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_ClearMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).ClearMessages(ctx, req.(*ClearMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_ReadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_WriteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_GetFileChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).GetFileChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_GetFileChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).GetFileChanges(ctx, req.(*GetFileChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_CancelAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).CancelAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_CancelAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).CancelAgent(ctx, req.(*CancelAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_GetAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).GetAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_GetAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).GetAgentStatus(ctx, req.(*GetAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCodeService_SetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCodeServiceServer).SetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCodeService_SetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCodeServiceServer).SetModel(ctx, req.(*SetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenCodeService_ServiceDesc is the grpc.ServiceDesc for OpenCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opencode.v1.OpenCodeService",
	HandlerType: (*OpenCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _OpenCodeService_Health_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _OpenCodeService_GetSession_Handler,
		},
		{
			MethodName: "ResetSession",
			Handler:    _OpenCodeService_ResetSession_Handler,
		},
		{
			MethodName: "GetSessionStats",
			Handler:    _OpenCodeService_GetSessionStats_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _OpenCodeService_ListMessages_Handler,
		},
		{
			MethodName: "ClearMessages",
			Handler:    _OpenCodeService_ClearMessages_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _OpenCodeService_ListFiles_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _OpenCodeService_ReadFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _OpenCodeService_WriteFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _OpenCodeService_DeleteFile_Handler,
		},
		{
			MethodName: "GetFileChanges",
			Handler:    _OpenCodeService_GetFileChanges_Handler,
		},
		{
			MethodName: "CancelAgent",
			Handler:    _OpenCodeService_CancelAgent_Handler,
		},
		{
			MethodName: "GetAgentStatus",
			Handler:    _OpenCodeService_GetAgentStatus_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _OpenCodeService_ListModels_Handler,
		},
		{
			MethodName: "SetModel",
			Handler:    _OpenCodeService_SetModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _OpenCodeService_SendMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMessages",
			Handler:       _OpenCodeService_StreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/opencode_service.proto",
}
